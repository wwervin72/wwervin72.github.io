import{_ as n,o as s,c as a,b as e}from"./app.0701a06a.js";const p={},t=e(`<h1 id="\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B" aria-hidden="true">#</a> \u7C7B\u578B</h1><h2 id="infer" tabindex="-1"><a class="header-anchor" href="#infer" aria-hidden="true">#</a> infer</h2><p>\u8868\u793A\u5728 extends \u6761\u4EF6\u8BED\u53E5\u4E2D\u5F85\u63A8\u65AD\u7684\u7C7B\u578B\u53D8\u91CF</p><p>\u4E3E\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u8FD9\u91CC\u7684infer p\u662F\u5F85\u63A8\u65AD\u7C7B\u578B\uFF0C\u53EF\u4EE5\u662F\u4EFB\u610F\u7C7B\u578B\uFF0C\u7531\u521B\u5EFA\u7C7B\u578B\u65F6\u5019\u4F20\u5165\u7684\u53C2\u6570\u51B3\u5B9A</span>
<span class="token keyword">type</span> <span class="token class-name">ParamType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token comment">// ParamType&lt;Func&gt; \u4F20\u5165\u7684\u65B9\u6CD5 Func \uFF1B\u7C7B\u578B\u662F\u53EF\u4EE5\u8D4B\u503C\u7ED9 (arg: infer P) =&gt; any \u7C7B\u578B\u7684\uFF0C\u6240\u4EE5\u8FD9\u91CC P \u5C31\u662F\u4F20\u5165\u65B9\u6CD5\u7684\u53C2\u6570 User \u7C7B\u578B\uFF0C\u6700\u540E\u8868\u8FBE\u5F0F\u5C06\u8FD9\u4E2A\u7C7B\u578B\u8FD4\u56DE</span>
<span class="token keyword">type</span> <span class="token class-name">Param</span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Param = User</span>
<span class="token comment">// string \u7C7B\u578B\u4E0D\u80FD\u8D4B\u503C\u7ED9\u7C7B\u578B (arg: infer P) =&gt; any\uFF0C\u6240\u4EE5\u8FD9\u91CC\u76F4\u63A5\u8FD4\u56DE\u4F20\u5165\u7684\u7C7B\u578B string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AA</span></span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5E94\u7528\u573A\u666F\u4E00-\u63D0\u53D6\u8FD4\u56DE\u503C\u6216\u8005\u53C2\u6570\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u5E94\u7528\u573A\u666F\u4E00-\u63D0\u53D6\u8FD4\u56DE\u503C\u6216\u8005\u53C2\u6570\u7C7B\u578B" aria-hidden="true">#</a> \u5E94\u7528\u573A\u666F\u4E00\uFF1A\u63D0\u53D6\u8FD4\u56DE\u503C\u6216\u8005\u53C2\u6570\u7C7B\u578B</h3><p>\u63D0\u53D6\u53C2\u6570\u7C7B\u578B\u5373\u53EF\u53C2\u7167\u4E0A\u9762\u7ED9\u51FA\u7684\u4F8B\u5B50</p><p>\u63D0\u53D6\u8FD4\u56DE\u503C\u7C7B\u578B\uFF0C\u4E3E\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> User<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Test = User</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5E94\u7528\u573A\u666F\u4E8C-\u63D0\u53D6\u6784\u9020\u51FD\u6570\u53C2\u6570\u6216\u8005\u5B9E\u4F8B\u7684\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u5E94\u7528\u573A\u666F\u4E8C-\u63D0\u53D6\u6784\u9020\u51FD\u6570\u53C2\u6570\u6216\u8005\u5B9E\u4F8B\u7684\u7C7B\u578B" aria-hidden="true">#</a> \u5E94\u7528\u573A\u666F\u4E8C\uFF1A\u63D0\u53D6\u6784\u9020\u51FD\u6570\u53C2\u6570\u6216\u8005\u5B9E\u4F8B\u7684\u7C7B\u578B</h3><p>\u4E3E\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u6784\u9020\u51FD\u6570\u53EF\u4EE5\u8868\u793A\u5982\u4E0B</span>
<span class="token keyword">type</span> <span class="token class-name">c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token comment">// \u83B7\u53D6\u53C2\u6570\u7C7B\u578B\uFF0C\u901A\u5E38\u60C5\u51B5\u4E0B\u8FD9\u91CC\u83B7\u53D6\u7684\u7C7B\u578B\u662F\u5143\u7956</span>
<span class="token keyword">type</span> <span class="token class-name">getParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> c<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
  <span class="token operator">?</span> <span class="token constant">P</span>
  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">getInstance<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> c<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Params \u662F\u5143\u7956\u7C7B\u578B</span>
<span class="token keyword">type</span> <span class="token class-name">Params</span> <span class="token operator">=</span> cc<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [string, number]</span>

<span class="token keyword">type</span> <span class="token class-name">Instance</span> <span class="token operator">=</span> ii<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// TestClass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5E94\u7528\u573A\u666F\u4E09-\u5C06\u5143\u7956\u7C7B\u578B\u8F6C\u6362\u4E3A\u8054\u5408\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u5E94\u7528\u573A\u666F\u4E09-\u5C06\u5143\u7956\u7C7B\u578B\u8F6C\u6362\u4E3A\u8054\u5408\u7C7B\u578B" aria-hidden="true">#</a> \u5E94\u7528\u573A\u666F\u4E09\uFF1A\u5C06\u5143\u7956\u7C7B\u578B\u8F6C\u6362\u4E3A\u8054\u5408\u7C7B\u578B</h3><p>\u4E3E\u4E2A\u4F8B\u5B50:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u56E0\u4E3A\u5143\u7956\u7C7B\u578B\u662F\u53EF\u4EE5\u8D4B\u503C\u7ED9\u6570\u7EC4\u7C7B\u578B\u7684\uFF0C\u6240\u4EE5\u4F9D\u9760 infer \u53EF\u4EE5\u5C06\u5143\u7956\u7C7B\u578B\u8F6C\u6362\u4E3A\u8054\u5408\u7C7B\u578B</span>
<span class="token keyword">type</span> <span class="token class-name">getUnionType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token comment">// Params \u4E3A\u4E0A\u9762\u83B7\u53D6\u7684\u6784\u9020\u51FD\u6570\u53C2\u6570\u7C7B\u578B</span>
<span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> getUnionType<span class="token operator">&lt;</span>Params<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="never-\u5E95\u90E8\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#never-\u5E95\u90E8\u7C7B\u578B" aria-hidden="true">#</a> never \u5E95\u90E8\u7C7B\u578B</h2><p>never \u7C7B\u578B\u4E3A\u7A7A\u7C7B\u578B\u548C\u5E95\u90E8\u7C7B\u578B\u3002never \u7C7B\u578B\u7684\u53D8\u91CF\u65E0\u6CD5\u88AB\u8D4B\u503C\uFF0C\u4E0E\u5176\u4ED6\u7C7B\u578B\u6C42\u4EA4\u96C6\u4E3A\u81EA\u8EAB\uFF0C\u6C42\u5E76\u96C6\u4E0D\u53C2\u4E0E\u8FD0\u7B97\u3002</p><p>\u4E3E\u4E2A\u4F8B\u5B50:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token operator">|</span> <span class="token builtin">never</span> <span class="token comment">// \u7ED3\u679C\u4E3AT</span>
<span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token builtin">never</span> <span class="token comment">// \u7ED3\u679C\u4E3Anever</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>never \u5728\u5B9E\u9645\u4E2D\u7684\u8FD0\u7528</p><h3 id="\u5E94\u7528\u4E00-\u627E\u51FA\u6307\u5B9A\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u5E94\u7528\u4E00-\u627E\u51FA\u6307\u5B9A\u7C7B\u578B" aria-hidden="true">#</a> \u5E94\u7528\u4E00\uFF1A\u627E\u51FA\u6307\u5B9A\u7C7B\u578B</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">DemoInterface</span><span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token function-variable function">d</span><span class="token operator">:</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token function-variable function">e</span><span class="token operator">:</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">getNumFnProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> condition<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">condition</span> <span class="token operator">?</span> k <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>

<span class="token comment">// &quot;b&quot; | &quot;c&quot; | &quot;d&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">numFnProps</span> <span class="token operator">=</span> getNumFnProps<span class="token operator">&lt;</span>DemoInterface<span class="token punctuation">,</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> a<span class="token operator">:</span> numFnProps <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD0\u7B97\u8FC7\u7A0B\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u5F00\u59CB\uFF0C\u89E3\u6790interface</span>
<span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token function-variable function">d</span><span class="token operator">:</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token function-variable function">e</span><span class="token operator">:</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// type getNumFnProps&lt;T, condition&gt; \u5206\u4E3A\u4E0B\u9762\u4E24\u90E8\u8FDB\u884C</span>
<span class="token comment">// \u7B2C\u4E00\u6B65\u6620\u5C04\u7C7B\u578B</span>
<span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token builtin">never</span>
    b<span class="token operator">:</span> <span class="token string">&#39;b&#39;</span>
    c<span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>
    d<span class="token operator">:</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span>
    e<span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u7B2C\u4E8C\u6B65 [keyof T] \u7D22\u5F15\u53D6\u503C</span>
<span class="token comment">// never \u5C06\u4F1A\u88AB\u8FC7\u6EE4\u6389</span>
<span class="token builtin">never</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;d&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;never&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5E94\u7528\u4E8C-\u9632\u5FA1\u6027\u7F16\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u5E94\u7528\u4E8C-\u9632\u5FA1\u6027\u7F16\u7A0B" aria-hidden="true">#</a> \u5E94\u7528\u4E8C\uFF1A\u9632\u5FA1\u6027\u7F16\u7A0B</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>   type<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span> 
<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>   type<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span> 
<span class="token keyword">type</span> <span class="token class-name">All</span> <span class="token operator">=</span> Foo <span class="token operator">|</span> Bar

<span class="token keyword">function</span> <span class="token function">handleValue</span><span class="token punctuation">(</span>val<span class="token operator">:</span> All<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">:</span>
        <span class="token comment">// \u8FD9\u91CC val \u88AB\u6536\u7A84\u4E3A Foo</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> <span class="token string">&#39;bar&#39;</span><span class="token operator">:</span>
        <span class="token comment">// val \u5728\u8FD9\u91CC\u662F Bar</span>
        <span class="token keyword">break</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">// val \u5728\u8FD9\u91CC\u662F never\uFF0C\u5982\u679C\u4E0A\u9762\u7684 case \u6CA1\u6709\u5217\u4E3E\u5B8C All \u53EF\u80FD\u7684\u7C7B\u578B\uFF0C\u5219\u4F1A\u8D70 default \u5206\u4E4B\uFF0C\u5E76\u4E14\u5C06 val \u503C\u8D4B\u503C\u7ED9 exhaustiveCheck\uFF0C\u4F46\u662F\u8FD9\u91CC\u662F never \u7C7B\u578B\uFF0C\u6240\u4EE5\u8FD9\u91CC\u5982\u679C\u7C7B\u578B\u6CA1\u5217\u4E3E\u5B8C\u5168\u5219\u4F1A\u7F16\u8BD1\u62A5\u9519</span>
        <span class="token keyword">const</span> exhaustiveCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> val
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unknown" tabindex="-1"><a class="header-anchor" href="#unknown" aria-hidden="true">#</a> unknown</h2><p>\u6307\u4E0D\u53EF\u9884\u5148\u5B9A\u4E49\u7684\u7C7B\u578B\uFF0C\u5728\u5F88\u591A\u573A\u666F\u4E0B\uFF0C\u5B83\u53EF\u4EE5\u66FF\u4EE3 any \u7684\u529F\u80FD\u540C\u65F6\u4FDD\u7559\u9759\u6001\u68C0\u67E5\u7684\u80FD\u529B</p><p>unknow \u7C7B\u578B\u5728\u9759\u6001\u7F16\u8BD1\u7684\u65F6\u5019\u4E0D\u80FD\u8C03\u7528\u4EFB\u4F55\u65B9\u6CD5\u6216\u5C5E\u6027\uFF0C\u6BD4\u5982</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">var</span> a <span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// \u62A5\u9519</span>
a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u9700\u8981\u65AD\u8A00\u540E\u518D\u540A\u7528\u65B9\u6CD5</span>
<span class="token punctuation">(</span>a <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5E94\u7528\u4E00\uFF1A\u65E0\u6CD5\u786E\u8BA4\u7C7B\u578B\u7684\u573A\u666F</p><p>\u8FD9\u79CD\u60C5\u51B5\u9700\u8981\u5728\u4EE3\u7801\u4E2D\u53BB\u5224\u65AD\u4E0D\u540C\u7C7B\u578B\u8FDB\u884C\u4E0D\u540C\u64CD\u4F5C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">resultValueBySome</span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5185\u7F6E\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u5185\u7F6E\u7C7B\u578B" aria-hidden="true">#</a> \u5185\u7F6E\u7C7B\u578B</h2><h3 id="pick-t-u" tabindex="-1"><a class="header-anchor" href="#pick-t-u" aria-hidden="true">#</a> Pick&lt;T, U&gt;</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="extract-t-u" tabindex="-1"><a class="header-anchor" href="#extract-t-u" aria-hidden="true">#</a> Extract&lt;T, U&gt;</h3><p>T\u5982\u679C\u80FD\u8D4B\u503C\u7ED9U\uFF0C\u5219\u8FD4\u56DE\u7C7B\u578BT,\u5426\u5219 never</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="exclude-t-u" tabindex="-1"><a class="header-anchor" href="#exclude-t-u" aria-hidden="true">#</a> Exclude&lt;T, U&gt;</h3><p>T\u5982\u679C\u80FD\u8D4B\u503C\u7ED9U\uFF0C\u5219\u8FD4\u56DE\u7C7B\u578BNever,\u5426\u5219 T</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,42),o=[t];function c(l,i){return s(),a("div",null,o)}var k=n(p,[["render",c],["__file","\u7C7B\u578B.html.vue"]]);export{k as default};
