import{_ as n,o as s,c as a,e as t}from"./app.09fb4218.js";const p={},e=t(`<p>1.1 \u53C2\u6570\u901A\u8FC7 queryString \u7684\u65B9\u5F0F\u4F20\u9012\uFF0C\u7C7B\u4F3C\u4E8E url?a=1&amp;b=2&amp;c=3 \u7684\u5F62\u5F0F\uFF08\u8868\u5355 form \u63D0\u4EA4\u7684\u65F6\u5019\uFF0C\u6CE8\u610F\u6D4F\u89C8\u5668\u7684\u5730\u5740\u680F\uFF0C\u4E5F\u662F\u8FD9\u79CD\u65B9\u5F0F\uFF0C\u56E0\u4E3A form \u63D0\u4EA4\u9ED8\u8BA4\u7684 Content-Type \u5C31\u662F application/x-www-form-urlencoded\uFF09\uFF0CPOST \u65B9\u6CD5\u540C\u6837\u7684\u8BBE\u7F6E Content-Type: application/x-www-form-urlencoded \u4E5F\u662F\u901A\u8FC7\u8FD9\u79CD\u65B9\u5F0F\u63D0\u4EA4\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// \u901A\u8FC7\u8C03\u7528 r.ParseForm \u6765\u5904\u7406\u6570\u636E\uFF0C\u8F6C\u6362\u6210\u4E00\u4E2A map\uFF0C\u7136\u540E\u901A\u8FC7 r.Form[fieldName] \u65B9\u5F0F\u6765\u83B7\u53D6\u5BF9\u5E94\u5B57\u6BB5\u7684\u6570\u636E</span>
err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Form<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.2 Content-Type \u4E3A multipart/form-data \u7684\u65B9\u5F0F\uFF0C\u6587\u4EF6\u4E0A\u4F20\u7B49\u53EF\u4EE5\u4F7F\u7528\u8BE5\u65B9\u5F0F \u901A\u8FC7\u6253\u5370 request.body \u901A\u5E38\u4F1A\u53D1\u73B0\u8FD9\u6837\u7684\u6570\u636E</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>WebKitFormBoundaryWdDAe6hxfa4nl2Ig
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">&quot;userName&quot;</span>
ervin
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>WebKitFormBoundaryWdDAe6hxfa4nl2Ig
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">&quot;file1&quot;</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">&quot;out.png&quot;</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> image<span class="token operator">/</span>png
binary<span class="token operator">-</span>data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.2.1 \u901A\u8FC7 r.ParseMultipartForm \u65B9\u5F0F\u89E3\u6790</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// &lt;!--1024 \u8868\u793A\u8BFB\u53D6\u6570\u636E\u7684\u6700\u5927\u5185\u5B58\u5927\u5C0F--&gt;</span>
<span class="token comment">// &lt;!--\u6CE8\u610F\u8BE5\u65B9\u6CD5\u4E5F\u4F1A\u8C03\u7528 r.ParseForm() \u6240\u4EE5\u4E5F\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528 r.Form[fieldName] \u83B7\u53D6\u6307\u5B9A\u5B57\u6BB5\u503C--&gt;</span>
r<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>MultipartForm<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Form<span class="token punctuation">)</span>
<span class="token comment">// pwd :  [123]</span>
<span class="token comment">// userName :  [abc]</span>
<span class="token comment">// map[a:[1] b:[21] pwd:[123] userName:[abc]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.2.2 \u901A\u8FC7 MultipartReader \u65B9\u5F0F\u89E3\u6790</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>mr<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">MultipartReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;\u89E3\u6790\u5931\u8D25&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
form<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> mr<span class="token punctuation">.</span><span class="token function">ReadForm</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> form<span class="token punctuation">.</span>Value <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// userName :  [abc]</span>
<span class="token comment">// pwd :  [123]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.2.3 \u901A\u8FC7\u5B57\u8282\u89E3\u6790</p><p>\u8BE5\u65B9\u5F0F\u4E5F\u9700\u8981\u4F7F\u7528 MultipartReader \u6765\u89E3\u6790\u6570\u636E\uFF0C\u53EA\u662F\u8BFB\u53D6\u6570\u636E\u7684\u65B9\u5F0F\u548C\u4E0A\u9762\u4E0D\u4E00\u6837</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>mr<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">MultipartReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;\u89E3\u6790\u5931\u8D25&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">{</span>
	p<span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span><span class="token function">NextPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
		<span class="token keyword">break</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;mr.NextPart() err,&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">break</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;part header:&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Header<span class="token punctuation">)</span>
	formName <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">FormName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fileName <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">FileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> formName <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> fileName <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
	    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>\u666E\u901A\u5B57\u6BB5<span class="token operator">--</span><span class="token operator">&gt;</span>
		formValue<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;formName:%s,formValue:%s\\n&quot;</span><span class="token punctuation">,</span> formName<span class="token punctuation">,</span> formValue<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> fileName <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
	    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>\u4E0A\u4F20\u6587\u4EF6<span class="token operator">--</span><span class="token operator">&gt;</span>
		fileData<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;fileName:%s,fileData:%s\\n&quot;</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> fileData<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// part header: map[Content-Disposition:[form-data; name=&quot;userName&quot;]]</span>
<span class="token comment">// formName:userName,formValue:abc</span>
<span class="token comment">// part header: map[Content-Disposition:[form-data; name=&quot;pwd&quot;]]</span>
<span class="token comment">//formName:pwd,formValue:123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.2 \u901A\u8FC7 raw \u5F62\u5F0F\u53D1\u9001\u7684\u8BF7\u6C42\u4F53\uFF0C\u53EF\u4EE5\u8BBE\u7F6E\u591A\u79CD Content-Type\uFF0C\u5904\u7406\u7ECF\u5E38\u4F7F\u7528\u7684 application/json\uFF0C\u5916\uFF0C\u8FD8\u6709text\u3001text/plain\u3001application/javascript\u3001application/xml\u3001text/xml\u3001text/html \u7B49\u51E0\u79CD\u683C\u5F0F</p><p>1.2.1 application/json</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// &lt;!--\u5C06\u8BF7\u6C42\u4F53\u91CC\u7684 json \u8BFB\u53D6\u4E3A []byte--&gt;</span>
res<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
ubody <span class="token operator">:=</span> <span class="token operator">&amp;</span>defs<span class="token punctuation">.</span>UserCredential<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// &lt;!--\u518D\u5C06 []byte \u8F6C\u6362\u6210\u6211\u4EEC\u5B9A\u4E49\u597D\u7684 struct \u6570\u636E\u7C7B\u578B--&gt;</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> ubody<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	<span class="token function">sendErrorResponse</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> defs<span class="token punctuation">.</span>ErrorRequestBodyParseFailed<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","\u63A5\u6536Req\u4E2D\u7684\u6570\u636E.html.vue"]]);export{r as default};
